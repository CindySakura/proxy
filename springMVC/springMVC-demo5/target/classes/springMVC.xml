<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd ">
  <!-- 扫描组件 -->
  <context:component-scan base-package="mvc"></context:component-scan>

  <!-- 配置Thymeleaf视图解析器 -->
  <bean id="viewResolver" class="org.thymeleaf.spring5.view.ThymeleafViewResolver">
    <property name="order" value="1"/>
    <property name="characterEncoding" value="UTF-8"/>
    <property name="templateEngine">
      <bean class="org.thymeleaf.spring5.SpringTemplateEngine">
        <property name="templateResolver">
          <bean class="org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver">

            <!-- 视图前缀 -->
            <property name="prefix" value="/WEB-INF/templates/"/>

            <!-- 视图后缀 -->
            <property name="suffix" value=".html"/>
            <property name="templateMode" value="HTML5"/>
            <property name="characterEncoding" value="UTF-8" />
          </bean>
        </property>
      </bean>
    </property>
  </bean>
  <!--需要在添加Servlet的配置：xmlns:mvc-->
  <mvc:view-controller path="/" view-name="index"></mvc:view-controller>
  <!--开放对静态资源的访问-->
  <mvc:default-servlet-handler />
  <!--开启mvc注解驱动的标签：-->
  <mvc:annotation-driven />

  <!--必须通过文件解析器的解析才能将文件封装为MultipartFile对象 一定要写id 因为SpringMVC是通过id获取bean的 普通的可以通过id或类型获取bean-->
  <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"></bean>

  <!--配置拦截器-->
  <mvc:interceptors>
    <!--第一种方式 若只配置这一个bean，该拦截器会对所有请求都拦截-->
<!--    <bean class="mvc.interceptor.FirstInterceptor"></bean>-->

    <!--第二种方式 ref同bean 都无法设置拦截规则 会对所有请求都拦截，ref可以引用当前ioc容器某个bean的id 需要把FirstInterceptor通过标识组件的方式 标识为一个bean交给容器管理（加注解 因为是普通组件 所以加component就行）-->
    <!-- 若有多个拦截器 按配置的顺序执行-->
        <ref bean="firstInterceptor"></ref>
        <ref bean="secondInterceptor"></ref>
    <!-- 以上两种配置方式都是对DispatcherServlet所处理的所有的请求进行拦截 -->

    <!--第三种方式 可以通过ref或bean标签设置拦截器，通过mvc:mapping设置需要拦截的请求，通过mvc:exclude-mapping设置需要排除的请求，即不需要拦截的请求-->
<!--    <mvc:interceptor>-->
<!--      &lt;!&ndash;只能拦截一层 两层要用/**&ndash;&gt;-->
<!--      <mvc:mapping path="/**"/>-->
<!--      <mvc:exclude-mapping path="/"/>-->
<!--      <ref bean="firstInterceptor"></ref>-->
<!--    </mvc:interceptor>-->
  </mvc:interceptors>

</beans>